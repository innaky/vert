(in-package :recurse.vert/unit-test)

(recurse.vert::notes
 old tests

 (defclass test-animated-drawable (animated-drawable)
   ((num-calls :initform 0 :accessor num-calls)))
 (defmethod apply-frame-to-drawable (frame (drawable test-animated-drawable)))
 (defmethod get-new-animation ((drawable test-animated-drawable))
     (with-accessors ((num-calls num-calls)) drawable
       (incf num-calls)
       (if (<= num-calls 1)
           (make-instance 'animation :frames #(frame1 frame2))
           (make-instance 'animation :frames #(frame3 frame4)))))

 (prove:deftest test-animation
     (let ((empty-animation (make-instance 'animation :frames #()))
           (empty-drawable (make-instance 'animated-drawable :width 10 :height 10 :path-to-sprite (test-resource-path "rgba.png"))))
       (prove:is (active-frame-index empty-animation) -1)
       (prove:is (get-active-frame empty-animation) nil)
       (prove:is (get-next-frame empty-animation) nil)
       (setf (active-animation empty-drawable) empty-animation)
       (prove:is (active-animation empty-drawable) empty-animation)
       (animation-tick empty-animation empty-drawable)
       (prove:is (active-animation empty-drawable) nil))
   (let ((drawable (make-instance 'test-animated-drawable :width 1 :height 1 :path-to-sprite (test-resource-path "rgba.png"))))
     (prove:is (active-animation drawable) nil)
     (animate drawable)
     (prove:is (get-active-frame (active-animation drawable)) 'frame1)
     (animate drawable)
     (prove:is (get-active-frame (active-animation drawable)) 'frame2)
     (animate drawable)
     (prove:is (active-animation drawable) nil)
     (animate drawable)
     (prove:is (get-active-frame (active-animation drawable)) 'frame3))
   (let* ((animation-timer (make-instance 'time-delay-animation
                                          :frames #(frame1 frame2 frame3)
                                          :time-between-frames-ms (* 1000 60 60 24 365)))
          (drawable (make-instance 'test-animated-drawable :width 10 :height 10 :path-to-sprite (test-resource-path "rgba.png"))))
     (setf (active-animation drawable) animation-timer)
     (animate drawable)
     (prove:is (get-active-frame animation-timer) 'frame1)
     (animate drawable)
     (prove:is (get-active-frame animation-timer) 'frame1)
     (prove:is (get-next-frame animation-timer) 'frame2)
     (with-accessors ((last-change-ts last-frame-change-timestamp-ms)
                      (frame-delta time-between-frames-ms))
         animation-timer
       (setf last-change-ts (- last-change-ts frame-delta))
       (animate drawable)
       (prove:is (get-active-frame animation-timer) 'frame2)
       (animate drawable)
       (animate drawable)
       (animate drawable)
       (prove:is (get-active-frame animation-timer) 'frame2)
       (prove:is (get-next-frame animation-timer) 'frame3)

       (setf last-change-ts (- last-change-ts frame-delta))
       (animate drawable)
       (animate drawable)
       (animate drawable)
       (prove:is (get-active-frame animation-timer) 'frame3)
       (prove:is (get-next-frame animation-timer) nil)

       (setf last-change-ts (- last-change-ts frame-delta))
       (animate drawable)
       (prove:is (get-active-frame animation-timer) nil)
       (prove:is (get-next-frame animation-timer) 'frame1))))

 (prove:deftest test-effects
     (let ((drawable (make-instance 'test-animated-drawable :width 1 :height 1 :path-to-sprite (test-resource-path "rgba.png")))
           (animation (make-instance 'animation :frames #(frame1 frame2)))
           (effect1 (make-instance 'animation :frames #(eff1.1 eff1.2)))
           (effect2 (make-instance 'animation :frames #(eff2.1 eff2.2 eff2.3))))
       (activate-effect effect1 drawable)
       (activate-effect effect2 drawable)
       (setf (active-animation drawable) animation)

       (animate drawable)
       (prove:is (active-animation drawable) animation)
       (prove:is (get-active-frame (active-animation drawable)) 'frame1)
       (prove:is (animation-effects drawable) (list effect1 effect2))
       (prove:is (get-active-frame (first (animation-effects drawable))) 'eff1.1)
       (prove:is (get-active-frame (second (animation-effects drawable))) 'eff2.1)

       (animate drawable)
       (prove:is (get-active-frame (active-animation drawable)) 'frame2)
       (prove:is (animation-effects drawable) (list effect1 effect2))
       (prove:is (get-active-frame (first (animation-effects drawable))) 'eff1.2)
       (prove:is (get-active-frame (second (animation-effects drawable))) 'eff2.2)

       (animate drawable)
       (prove:is (active-animation drawable) nil)
       (prove:is (animation-effects drawable) (list effect2))
       (prove:is (get-active-frame (first (animation-effects drawable))) 'eff2.3))))
